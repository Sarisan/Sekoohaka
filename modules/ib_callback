#!/usr/bin/env dash
#
# Copyright (C) 2024 Maria Lisina
# Copyright (C) 2024 Danil Lisin
# SPDX-License-Identifier: Apache-2.0

set -- $(jq -r '.callback_query.data' "${update}")

if [ -n "${1}" ]
then
    case "${1}" in
        ("post")
            ib_post=0
        ;;
        ("tags")
            ib_tags=0
        ;;
        (*)
            exit 0
        ;;
    esac

    shift
else
    exit 0
fi

user_id="$(jq -r '.callback_query.from.id' "${update}")"
query_id="$(jq -r '.callback_query.id' "${update}")"

if [ -n "${1}" ]
then
    ib_board="${1}"
    ib_mode="p"

    . "${submodules}/ib_config"
    . "${submodules}/ib_authconfig"

    notification_text="${output_text}"
    shift
else
    notification_text="No image board specified"
fi

if [ -n "${1}" ]
then
    ib_post_id="${1}"
    shift
elif [ -z "${notification_text}" ]
then
    notification_text="No post ID specified"
fi

if [ -z "${notification_text}" ] && [ -n "${ib_config}" ]
then
    ib_lock=0
    . "${submodules}/ib_token"

    if [ -n "${output_text}" ]
    then
        notification_text="${output_title} ${output_text}"
    fi
fi

if [ -z "${notification_text}" ]
then
    . "${submodules}/ib_file"

    if [ -n "${output_text}" ]
    then
        notification_text="${output_text}"
    fi
fi

if [ -z "${notification_text}" ]
then
    chat_id="$(jq -r '.callback_query.message.chat.id' "${update}")"
    message_id="$(jq -r '.callback_query.message.message_id' "${update}")"
    inline_message_id="$(jq -r '.callback_query.inline_message_id' "${update}")"

    if [ -n "${ib_post}" ]
    then
        . "${submodules}/ib_post"

        link_preview_options="$(jq --null-input --compact-output \
            --arg url1 "${ib_sample_url}" \
            '{"url": $url1, "prefer_small_media": true, "show_above_text": true}')"

        reply_markup="$(jq --null-input --compact-output \
            --arg text1 "Post link" \
            --arg url1 "${ib_url}$(printf "%s" "${ib_post_id}" | urlencode)" \
            '{"inline_keyboard": [[{"text": $text1, "url": $url1}]]}')"

        if [ ${ib_tags_count} -gt 0 ]
        then
            reply_markup="$(printf "%s" "${reply_markup}" | jq --compact-output \
                --arg text1 "Tags (${ib_tags_count})" \
                --arg data1 "tags ${ib_board} ${ib_post_id}" \
                '.inline_keyboard.[0] += [{"text": $text1, "callback_data": $data1}]')"
        fi
    elif [ -n "${ib_tags}" ]
    then
        ib_created_at="$(jq -r ".${ib_iarray}[${array_count}].${ib_icreated}" "${ib_file}")"
        ib_file_url="$(jq -r ".${ib_iarray}[0].${ib_ifile}" "${ib_file}")"
        ib_file_size="$(jq -r ".${ib_iarray}[0].${ib_isize}" "${ib_file}")"
        ib_tags="$(jq -r ".${ib_iarray}[0].${ib_itags}" "${ib_file}" | htmlescape)"
        ib_tags_offset=${1:-0}
        ib_tags_total=0
        ib_tags_count=0

        . "${submodules}/ib_size"
        . "${submodules}/ib_meta"

        if [ -n "${ib_tags}" ] && [ "${ib_tags}" != "null" ]
        then
            set -- ${ib_tags}
            ib_tags_total=${#}
        else
            notification_text="Failed to get tags"
        fi

        if [ -z "${notification_text}" ]
        then
            ib_group_offset=${ib_tags_offset}
            set -- ${ib_groups}

            while [ ${#} -ge 2 ]
            do
                ib_group_tags="$(jq -r ".${ib_iarray}[0].${1}" "${ib_file}" | htmlescape)"
                ib_group_name="${2}"
                ib_groups_saved="${@}"

                if [ -n "${ib_group_tags}" ] && [ "${ib_group_tags}" != "null" ]
                then
                    set -- ${ib_group_tags}
                    ib_group_count=${#}

                    if [ ${ib_group_count} -gt ${ib_group_offset} ]
                    then
                        shift ${ib_group_offset}
                        ib_group_offset=0
                    else
                        ib_group_offset=$((ib_group_offset - ib_group_count))

                        set -- ${ib_groups_saved}
                        shift 2

                        continue
                    fi

                    ib_group_text="$(printf "%s\n<b>%s:</b>" "${output_text}" "${ib_group_name}")"

                    while [ ${#} -gt 0 ]
                    do
                        ib_tag="<code>${1}</code>"

                        ib_tags_length=${#ib_group_text}
                        ib_tag_length=${#ib_tag}

                        if [ $((ib_tags_length + ib_tag_length + 1)) -gt 2048 ]
                        then
                            break 2
                        fi

                        ib_group_text="${ib_group_text} ${ib_tag}"
                        ib_tags_count=$((ib_tags_count + 1))

                        output_text="${ib_group_text}"
                        shift
                    done
                fi

                set -- ${ib_groups_saved}
                shift 2
            done

            if [ -z "${output_text}" ]
            then
                notification_text="No tags found"
            fi
        fi

        if [ -z "${notification_text}" ]
        then
            link_preview_options="$(jq --null-input --compact-output \
                --arg url1 "${ib_sample_url}" \
                '{"url": $url1, "prefer_small_media": true, "show_above_text": true}')"

            reply_markup="$(jq --null-input --compact-output \
                --arg text1 "Back" \
                --arg data1 "post ${ib_board} ${ib_post_id}" \
                '{"inline_keyboard": [[{"text": $text1, "callback_data": $data1}]]}')"

            if [ ${ib_tags_offset} -gt 0 ]
            then
                reply_markup="$(printf "%s" "${reply_markup}" | jq --compact-output \
                    --arg text1 "Over" \
                    --arg data1 "tags ${ib_board} ${ib_post_id}" \
                    '.inline_keyboard.[0] += [{"text": $text1, "callback_data": $data1}]')"
            fi

            if [ $((ib_tags_total - ib_tags_offset - ib_tags_count)) -gt 0 ]
            then
                reply_markup="$(printf "%s" "${reply_markup}" | jq --compact-output \
                    --arg text1 "Next" \
                    --arg data1 "tags ${ib_board} ${ib_post_id} $((ib_tags_offset + ib_tags_count))" \
                    '.inline_keyboard.[0] += [{"text": $text1, "callback_data": $data1}]')"
            fi
        fi
    fi

    if [ -z "${notification_text}" ]
    then
        if [ "${chat_id}" = "null" ]
        then
            unset chat_id
            unset message_id
        fi

        output_file="${cache}/${update_id}_editMessageText.json"

        curl --data-urlencode "chat_id=${chat_id}" \
            --data-urlencode "message_id=${message_id}" \
            --data-urlencode "inline_message_id=${inline_message_id}" \
            --data-urlencode "text=${output_text}" \
            --data-urlencode "parse_mode=HTML" \
            --data-urlencode "link_preview_options=${link_preview_options}" \
            --data-urlencode "reply_markup=${reply_markup}" \
            --get \
            --output "${output_file}" \
            --silent \
            "${address}/bot${token}/editMessageText"

        if [ -z "${notification_text}" ] && ! jq -e '.' "${output_file}" > /dev/null 2>&1
        then
            notification_text="An unknown error occurred"
        fi

        if [ -z "${notification_text}" ] && [ "$(jq -r '.ok' "${output_file}")" != "true" ]
        then
            notification_text="Failed to update message"
        fi
    fi
fi

curl --data-urlencode "callback_query_id=${query_id}" \
    --data-urlencode "text=${notification_text}" \
    --data-urlencode "cache_time=0" \
    --get \
    --silent \
    "${address}/bot${token}/answerCallbackQuery" > /dev/null
